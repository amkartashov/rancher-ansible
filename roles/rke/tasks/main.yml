- name: download rke
  get_url: url={{ rke_url }} dest=/tmp/rke mode=a+x
- name: generate ssh key on first controller
  command: ssh-keygen -t rsa -f /root/.ssh/id_rsa -N ''
  args:
    creates: /root/.ssh/id_rsa
- name: generate ssh public key
  command: ssh-keygen -y -f /root/.ssh/id_rsa
  register: ssh_keygen_public
  changed_when: false
- name: install ssh key to all servers
  authorized_key: user=root key={{ ssh_keygen_public.stdout }}
  delegate_to: "{{ item }}"
  with_items:
  - "{{ groups['g_controllers'] | union(groups['g_workers']) }}"
- name: generate certificates
  block:
  - name: create directory for certificates
    file: path=/root/CERTS mode=0700 state=directory
  - name: generate CA key
    shell: >
      openssl genrsa -out /root/CERTS/ca-key.pem 2048
      creates=/root/CERTS/ca-key.pem
  - name: generate CA
    shell: >
      openssl req -x509 -new -nodes -days 10000
      -key /root/CERTS/ca-key.pem
      -out /root/CERTS/ca.pem
      -subj "/CN=rancherca"
      creates=/root/CERTS/ca.pem
  - name: generate rancher private key
    shell: >
      openssl genrsa -out /root/CERTS/rancher-key.pem 2048
      creates=/root/CERTS/rancher-key.pem
  - name: generate rancher CSR
    shell: >
      openssl req -new -sha256 -key /root/CERTS/rancher-key.pem 
      -out /root/CERTS/rancher.csr -subj "/CN={{ rancher_domain }}"
      creates=/root/CERTS/rancher.csr
  - name: sign rancher certificate
    shell: >
      openssl x509 -req -CA /root/CERTS/ca.pem -CAkey /root/CERTS/ca-key.pem
      -CAcreateserial -days 10000 -in /root/CERTS/rancher.csr -out /root/CERTS/rancher.crt
      creates=/root/CERTS/rancher.crt
  - name: register CA
    slurp: src=/root/CERTS/ca.pem
    register: slurp_ca
  - name: register rancher private key
    slurp: src=/root/CERTS/rancher-key.pem
    register: slurp_key
  - name: register rancher certificate
    slurp: src=/root/CERTS/rancher.crt
    register: slurp_crt
- name: generate rke config
  template: src=rke.config.yml.j2 dest=/tmp/rke.config.yml
  vars:
    tls_crt: "{{ slurp_crt.content }}" 
    tls_key: "{{ slurp_key.content }}"
    ca_crt: "{{ slurp_ca.content }}"
